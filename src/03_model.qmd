---
title: "3. Model"
format: html
---

Import packages:
```{r}
library(here)
library(tidyr)
library(dplyr)
library(rlang)
library(glue)
library(brms)
library(purrr)
library(parallel)
library(stringr)
library(loo)
library(ggplot2)
source("utilities.R")
```

Import data:
```{r}
data = readRDS(here("data", "data_processed.csv"))
pron_order = c("Jun", "Qing", "Gong", "RuEr")
data = data %>% mutate(PronTypeSimple = factor(PronTypeSimple, levels = pron_order))
```


```{r}
load_models()
```


# Priors

Setting the priors for coefficients:
```{r}
set_prior_pronpredict = function(response_cats, var){
    purrr::reduce(
        lapply(response_cats,
            function(x){
                set_prior(glue("normal(0, {var})"),
                    class = "b",
                    dpar = glue("mu{x}"))
            }
        ),
        c)
}

model_brm_priors = set_prior_pronpredict(pron_order[-1], 4)

```

# Running models

Function to create models:
```{r}
num_cores = parallel::detectCores(logical = FALSE) - 2L
get_model_pronpredict = function(formula, chains = 4L, iter = 2000L, cores = 1L){
    brm(formula,
        data = data,
        family = categorical(link = "logit"),
        chains = chains,
        iter = iter,
        prior = model_brm_priors,
        cores = getOption("mc.cores", min(cores, chains)),
        save_pars = save_pars(all = TRUE))
}
```

Simple trial model to ensure everything works correctly:
```{r}
model_test = get_model_pronpredict(
    bf(PronTypeSimple ~ Power),
    chains = 2L, iter = 1000L,
    cores = num_cores)
```

Main effects only: 
```{r}
model_mainonly = get_model_pronpredict(
    bf(PronTypeSimple ~ Power + Intimate + StanceH + StanceS + Kin + ImpositionH + (1 | Speaker)),
    cores = num_cores
)
saveRDS(model_mainonly, file = "models/model_mainonly.rds")
```

Power / stance interact:
```{r}
model_main_powstanceh = get_model_pronpredict(
    bf(PronTypeSimple ~ Intimate + Power * StanceH + StanceS + Kin + ImpositionH + (1 | Speaker)),
    cores = num_cores
)
```

Intimacy interacting with power / stance:
```{r}
model_main_powintim = get_model_pronpredict(
    bf(PronTypeSimple ~ Power * Intimate + StanceH + StanceS + Kin + ImpositionH + (1 | Speaker)),
    cores = num_cores
)
model_main_intimstanceh = get_model_pronpredict(
    bf(PronTypeSimple ~ Power + Intimate * StanceH + StanceS + Kin + ImpositionH + (1 | Speaker)),
    cores = num_cores
)
model_full_intim = get_model_pronpredict(
    bf(PronTypeSimple ~ Power * Intimate + Power * StanceH + Intimate * StanceH + StanceS + Kin + ImpositionH + (1 | Speaker)),
    cores = num_cores
)

saveRDS(model_main_powintim, file = "models/model_main_powintim.rds")
saveRDS(model_main_powstanceh, file = "models/model_main_powstanceh.rds")
saveRDS(model_main_intimstanceh, file = "models/model_main_intimstanceh.rds")
saveRDS(model_full_intim, file = "models/model_full_intim.rds")
```

Kin interacting with power / stance:
```{r}
model_main_powkin = get_model_pronpredict(
    bf(PronTypeSimple ~ Power * Intimate + StanceH + StanceS + Kin + ImpositionH + (1 | Speaker)),
    cores = num_cores
)
model_main_kintanceh = get_model_pronpredict(
    bf(PronTypeSimple ~ Power + Intimate * StanceH + StanceS + Kin + ImpositionH + (1 | Speaker)),
    cores = num_cores
)
model_full_kin = get_model_pronpredict(
    bf(PronTypeSimple ~ Power * Kin + Power * StanceH + Kin * StanceH + StanceS + Intimate + ImpositionH + (1 | Speaker)),
    cores = num_cores
)
saveRDS(model_main_powkin, file = "models/model_main_powkin.rds")
saveRDS(model_main_kintanceh, file = "models/model_main_kintanceh.rds")
saveRDS(model_full_kin, file = "models/model_full_kin.rds")
```

```{r}
list_files(here("models"))
```



# Model comparison
Run cross validation:
```{r}
#loo_compare = loo(model_mainonly, model_full, model_main_powintim, model_main_powstanceh, model_main_intimstanceh, moment_match = TRUE)
kfold_compare = kfold(model_mainonly, model_main_powstanceh,
    model_main_powintim, model_main_intimstanceh,
    model_main_powkin, model_main_kintanceh,
    model_full_kin, model_full_intim)
saveRDS(kfold_compare, file = "models/cv_model.rds")
rm(list = ls()[str_detect(ls(), "^model_[a-z_]*$")])
kfold_compare = readRDS(here("models", "cv_model.rds"))
```

Functions to plot the evaluations:
```{r}
plot_brmsveval_ic = function(brmseval){
    brmseval_to_ggplot_df(brmseval) %>%
        arrange(ic) %>%
        ggplot(aes(y = ic, x = model)) +
        geom_point() +
        geom_errorbar(aes(ymin = ic_lower, ymax = ic_upper))
}

plot_elpd_diff = function(brmseval, choose_thres = 3){
    brmseval$diffs %>%
        data.frame %>%
        tibble::rownames_to_column("model") %>%
        mutate(model = factor(model, levels = model)) %>%
        mutate(model_id = 1:nrow(brmseval$diffs),
               chosen = model_id <= choose_thres) %>%
        mutate(elpd_diff_u = elpd_diff + se_diff,
               elpd_diff_l = elpd_diff - se_diff) %>%
        ggplot(aes(y = elpd_diff, x = model_id, col = chosen)) +
        geom_point() +
        geom_errorbar(aes(ymin = elpd_diff_l,
                          ymax = elpd_diff_u,
                          width=.2),) +
        scale_x_continuous(breaks = 1:nrow(brmseval$diffs)) +
        xlab("Model ID") +
        ylab("ELPD difference with optimal model") +
        theme(legend.position = "none")
}

brmseval_to_ggplot_df = function(brmseval){
    best = names(which.min(lapply(brmseval$loos,
        function(x) x$estimates[3, 1])))

    lapply(names(brmseval$loos),
        function(model_name){
            c(model = model_name, brmseval$loos[[model_name]]$estimates[3,])
        }) %>%
        bind_rows %>%
        rename(ic = Estimate,
               se = SE) %>%
        mutate(ic = as.numeric(ic),
               se = as.numeric(se)) %>%
        mutate(ic_upper = ic + se,
               ic_lower = ic - se)
}

plot_brmsveval_ic(kfold_compare)
plot_elpd_diff(kfold_compare)
```

# Bayesian model weighting
```{r}
load_models(regex = "model_main_(?:full_intim|main_kintanceh|main_powkin)")
best_models = list(model_full_intim, model_main_kintanceh, model_main_powkin)
rm(list = ls()[str_detect(ls(), "^model_[a-z_]*$")])
```

```{r}
best_models = best_models %>% map(
    (~ .x %>% add_criterion(
        criterion = "kfold",
        k = 10L,
        cores = 4L)))
```

```{r}
model_best_averaged = brms::pp_average(model_full_intim, model_main_kintanceh, model_main_powkin, weights = "kfold")
saveRDS(model_best_averaged, here("models", "model_best3_average.rds"))
```

```{r}
model_loo_weights = loo_model_weights(
  best_models[[1]],
  best_models[[2]],
  best_models[[3]],
  method = "pseudobma",
  model_names = c("model_full_intim", "model_main_kinstanceh", "model_main_powkin"),
  cores = 8L
)
saveRDS(model_loo_weights, here("models", "model_best3_loo_weights.rds"))
```

```{r}
model_pseudobma_weights = map(best_models,
    function(x) pseudobma_weights(x$criteria$kfold$pointwise)
)
saveRDS(model_pseudobma_weights, here("models", "model_best3_pseudobma_weights.rds"))
```

